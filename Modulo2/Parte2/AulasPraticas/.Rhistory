knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(NLP)
library(RColorBrewer)
library(SnowballC)
library(pdftools)
library(ggplot2)
library(tidytext)
library(qdap)
library(openNLP)
library("openNLPmodels.pt", lib.loc="C:/Program Files/R/R-3.6.2/library")
install.packages(wordcloud)
install.packages(tm)
install.packages(c('wordcloud', 'tm', 'NLP', 'RColorBrewer', 'SnowballC', 'pdftools', 'ggplot2', 'tidytext', 'qdap', 'openNLP'))
library(wordcloud)
library(tm)
library(NLP)
library(RColorBrewer)
library(SnowballC)
library(pdftools)
library(ggplot2)
library(tidytext)
library(tidytext)
library(qdap)
library(tidytext)
library(qdap)
library(openNLP)
library("openNLPmodels.pt", lib.loc="C:/Program Files/R/R-3.6.2/library")
install.packages(c('openNLPmodels.pt', lib.loc='C:/Program Files/R/R-3.6.2/library'))
install.packages(c('pdftools', 'rprojroot', 'tidyverse', 'readr', 'tm', 'tidytext', 'wordcloud', 'magrittr'))
install.packages(c("pdftools", "rprojroot", "tidyverse", "readr", "tm", "tidytext", "wordcloud", "magrittr"))
install.packages(c('openNLPmodels.pt'))
install.packages('openNLPmodels.pt', lib.loc='C:/Program Files/R/R-3.6.2/library')
install.packages('dplyr')
install.packages('ggplot2')
install.packages('readxl')
install.packages('readr')
install.packages('sqldf')
install.packages('stringr')
install.packages('wordcloud')
x <- c(1+2, "A", 5 > 4)
x
library(dplyr)
quit()
qnorm(0.05, 0, 1)
qnorm(0.025, 0, 1)
# Geraçao do dados
set.seed(536804)
educ <- sample(5:12, 600, replace=T)
renda <- 178.28 + 51.96*educ + rnorm(600,mean = 0, sd=30)
plot(educ, renda,
pch=16,
cex= 0.4,
col="red",
main = "Dados Analisados")
#ajuste do modelo
fit <- lm(renda~educ)
View(fit)
summary (fit)
names(fit)
fit$coefficients
fit$residuals
fit
xx <- data.frame(educ, renda, fit$fitted.values, fit$residuals)
View(xx)
round(sum(fit$residuals))
View(xx)
# Resumo dos Resultados Obtidos
resumo <- data.frame(educ, renda, fit$fitted.values, fit$residuals)
print('Olá, mundo!')
source('C:/Users/USUARIO/Downloads/IGTI/Bootcamp Online - Cientista de Dados/3 - Coleta e Obtencao de Dados/Parte 1/Anaconda/aloMundo2.R', echo=TRUE)
# Definição do método chamado get_pi()
get_pi <- function(){
#Recupera o valor de Pi
return(pi)
}
# Definição do método chamado hello()
hello <- function(msg){
mensagem = paste("Olá mundo, o valor de Pi é:", msg)
print(mensagem)
mensagem = paste("Olá mundo, o valor de Pi é:", msg, sep="")
print(mensagem)
mensagem = paste("Olá mundo, o valor de Pi é: ", msg, sep=" -> ")
print(mensagem)
}
msg <- toString(get_pi())
hello(msg)
View(get_pi)
View(hello)
library(RMariaDB)
# Conecta ao SGBD MySQL --> Banco de dados bootcamp
con <- dbConnect(MariaDB(), user="root", password="", dbname="bootcamp", host="localhost", serverTimezone='UTC')
install.packages('RMariaDB')
library(RMariaDB)
# Conecta ao SGBD MySQL --> Banco de dados bootcamp
con <- dbConnect(MariaDB(), user="root", password="", dbname="bootcamp", host="localhost", serverTimezone='UTC')
# Criação de uma tabela vazia
query <-
"CREATE TABLE caracteristicasgerais
(
idcaracteristicasGerais INT NOT NULL AUTO_INCREMET,
dsccaracteristicasGerais VARCHAR(150) NOT NULL,
PRIMARY KEY (idcaracteristicasGerais)
);"
print(query)
results <- dbSendQuery(con, query)
# Criação de uma tabela vazia
query <-
"CREATE TABLE caracteristicasgerais
(
idcaracteristicasGerais INT NOT NULL AUTO_INCREMET,
dsccaracteristicasGerais VARCHAR(150) NOT NULL,
PRIMARY KEY(idcaracteristicasGerais)
);"
print(query)
results <- dbSendQuery(con, query)
install.packages("RMariaDB")
if(!"RMariaDB" %in% (.packages())){require(RMariaDB)}
con <- dbConnect(MariaDB(), user="root", password="root", dbname="bootcamp", host="localhost", serverTimezone='UTC')
con <- dbConnect(MariaDB(), user="root", password="root", dbname="bootcamp", host="localhost", serverTimezone='UTC')
install.packages('RMariaDB')
library(RMariaDB)
con <- dbConnect(MariaDB(), user="root", password="root", dbname="bootcamp", host="localhost", serverTimezone='UTC')
View(con)
tables <- dbListTables(con)
tables
tabledata <- dbReadTable(con, "estado")
tabledata
tabledata <- dbReadTable(con, "cidade")
tabledata
tabledata <- dbReadTable(con, "imovel")
tabledata
tabledata <- dbReadTable(con, "tipounidade")
tabledata
resultado <- dbSendQuery(con, query)
query <- "SELECT * FROM estado"
resultado <- dbSendQuery(con, query)
resultado
resultado <- dbGetQuery(con, query)
resultado
tabledata <- dbReadTable(con)
tabledata
tabledata <- dbReadTable(con)
tabledata <- dbListTables(con)
tabledata
# Instalação de pacotes
install.packages("twitterR") #pacote descontinuado
install.packages("rtweet") #pacote mais atual
# Instalação de pacotes
install.packages("twitterR") #pacote descontinuado
install.packages("rtweet") #pacote mais atual
# Utilização dos pacotes
library(rtweet)
install.packages("rtweet")
# Instalação de pacotes
# install.packages("twitterR") #pacote descontinuado
install.packages("rtweet", dependencies = TRUE, INSTALL_opts = '--no-lock') #pacote mais atual
# Utilização dos pacotes
library(rtweet)
R CMD INSTALL --no-lock "rtweet"
p_unlock()
# Instalação de pacotes
# install.packages("twitterR") #pacote descontinuado
install.packages("rtweet", dependencies = TRUE, INSTALL_opts = '--no-lock') #pacote mais atual
# Instalação de pacotes
# install.packages("twitterR") #pacote descontinuado
install.packages("rtweet", dependencies = TRUE, INSTALL_opts = '--no-lock') #pacote mais atual
# Utilização dos pacotes
library(rtweet)
# Parâmetros de busca
screen_name <- "jairbolsonado"
no.of.tweets <- 1000 #número de tweets solicitados 1000
setwd("C:/Users/USUARIO/Downloads/IGTI/Bootcamp Online - Cientista de Dados/3_Modulo2_Coleta_e_Obtencao_de_Dados/Parte2/AulasPraticas")
# Definindo o workspace padrão
setwd("C:/Users/USUARIO/Downloads/IGTI/Bootcamp Online - Cientista de Dados/3_Modulo2_Coleta_e_Obtencao_de_Dados/Parte2/AulasPraticas")
getwd()
# Parâmetros de busca
screen_name <- "jairbolsonado"
no.of.tweets <- 1000 #número de tweets solicitados 1000
# Buscando
tweets <- get_timeline(screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
# Buscando
tweets <- get_timeline(screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
# Definindo o workspace padrão
setwd("C:/Users/USUARIO/Downloads/IGTI/Bootcamp Online - Cientista de Dados/3_Modulo2_Coleta_e_Obtencao_de_Dados/Parte2/AulasPraticas")
getwd()
# Instalação de pacotes
# install.packages("twitterR") #pacote descontinuado
install.packages("rtweet", dependencies = TRUE, INSTALL_opts = '--no-lock') #pacote mais atual
install.packages("rtweet", dependencies = TRUE, INSTALL_opts = "--no-lock")
# Utilização dos pacotes
# Documentação do rtweet: https://cran.r-project.org/web/packages/rtweet/rtweet.pdf
library(rtweet) #usa a API do Twitter
# Autenticação
token <- create_token(app="coletor-igti-nelson",
consumer_secret="t3YZulvL39Kyxk2DfCEDAcBGNkXekrQIjacn4OhWyS9ZICMHWp",
access_token="1074187804756885504-3AF27zTM7cU2v6ysDGTTcq8kp5Ne8A",
access_secret="F0ATapD20x9C6WE2mvevcV6J2aa8TX57lsv7zplyKkRSq")
# Utilização dos pacotes
# Documentação do rtweet: https://cran.r-project.org/web/packages/rtweet/rtweet.pdf
library(rtweet) #usa a API do Twitter
# Autenticação
token <- create_token(app="coletor-igti-nelson",
consumer_secret="t3YZulvL39Kyxk2DfCEDAcBGNkXekrQIjacn4OhWyS9ZICMHWp",
access_token="1074187804756885504-3AF27zTM7cU2v6ysDGTTcq8kp5Ne8A",
access_secret="F0ATapD20x9C6WE2mvevcV6J2aa8TX57lsv7zplyKkRSq")
# Utilização dos pacotes
# Documentação do rtweet: https://cran.r-project.org/web/packages/rtweet/rtweet.pdf
library(rtweet) #usa a API do Twitter
# Autenticação
token <- create_token(app="coletor-igti-nelson",
consumer_key="WsWFeGi2ivVtub30LBwYQIrhu",
consumer_secret="t3YZulvL39Kyxk2DfCEDAcBGNkXekrQIjacn4OhWyS9ZICMHWp",
access_token="1074187804756885504-3AF27zTM7cU2v6ysDGTTcq8kp5Ne8A",
access_secret="F0ATapD20x9C6WE2mvevcV6J2aa8TX57lsv7zplyKkRSq")
# Parâmetros de busca
screen_name <- "jairbolsonado"
no.of.tweets <- 1000 #número de tweets solicitados 1000
# Buscando
tweets <- get_timeline(screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
# Parâmetros de busca
screen_name <- "Jair M. Bolsonaro"
no.of.tweets <- 1000 #número de tweets solicitados 1000
# Buscando
tweets <- get_timeline(screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
# Salvando o vetor de tweets como CSV e apenas o Texto em TXT na codificação do português
write_as_csv(tweets, "TweetsByNameRawData.csv", fileEncoding="latin1//TRANSLIT")
View(tweets)
# Buscando
tweets <- get_timeline(screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
# Parâmetros de busca
screen_name <- "JairMBolsonaro"
no.of.tweets <- 1000 #número de tweets solicitados 1000
# Buscando
tweets <- get_timeline(screen_name=screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
# Parâmetros de busca
screen_name <- "realDonaldTrump"
no.of.tweets <- 1000 #número de tweets solicitados 1000
# Buscando
tweets <- get_timeline(screen_name=screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
# Buscando
tweets <- get_timeline(screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
View(tweets)
View(tweets)
View(tweets)
View(tweets)
View(tweets)
View(tweets)
View(tweets)
View(tweets)
cls
# Parâmetros de busca
screen_name <- "jairbolsonado"
no.of.tweets <- 1000 #número de tweets solicitados 1000
# Buscando
tweets <- get_timeline(screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
# Parâmetros de busca
screen_name <- "jairbolsonaro"
no.of.tweets <- 1000 #número de tweets solicitados 1000
# Buscando
tweets <- get_timeline(screen_name, n=no.of.tweets, include_rts=TRUE, exclude_replies=TRUE)
# Salvando o vetor de tweets como CSV e apenas o Texto em TXT na codificação do português
write_as_csv(tweets, "dados/TweetsByNameRawData.csv", fileEncoding="latin1//TRANSLIT")
# Plotando a série temporal dos tweets
ts_plot(tweets, "3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title=ggplot2::element_text(face="bold")) +
ggplot2::labs(
x=NULL,
y=NULL,
title="Frequência de tweets da conta 'jairbolsonaro' nos últimos 9 dias",
subtitle="Contagem de tweets agregados em intervalo de 3 horas",
caption="\nFonte: Dados coletados do Twitter com o pacote rtweet"
)
View(tweets)
# Definindo o workspace padrão
setwd("C:/Users/USUARIO/Downloads/IGTI/Bootcamp Online - Cientista de Dados/3_Modulo2_Coleta_e_Obtencao_de_Dados/Parte2/AulasPraticas")
getwd()
# Instalação de pacotes
# install.packages("twitterR") #pacote descontinuado
install.packages("rtweet", dependencies = TRUE, INSTALL_opts = '--no-lock') #pacote mais atual
install.packages("rtweet", dependencies = TRUE, INSTALL_opts = "--no-lock")
install.packages("maps")
# Utilização dos pacotes
# Documentação do rtweet: https://cran.r-project.org/web/packages/rtweet/rtweet.pdf
library(rtweet) #usa a API do Twitter
library(maps)
# Autenticação
token <- create_token(app="coletor-igti-nelson",
consumer_key="WsWFeGi2ivVtub30LBwYQIrhu",
consumer_secret="t3YZulvL39Kyxk2DfCEDAcBGNkXekrQIjacn4OhWyS9ZICMHWp",
access_token="1074187804756885504-3AF27zTM7cU2v6ysDGTTcq8kp5Ne8A",
access_secret="F0ATapD20x9C6WE2mvevcV6J2aa8TX57lsv7zplyKkRSq")
# Parâmetros de busca
search.string <- c("#ficaemcasa OR #coronavirus OR #covid OR #covid-19 OR #covid19")
type <- "mixed"
no.of.tweets <- 1000 #número de tweets solicitados 1000
# Buscando
# include_rts (TRUE ou FALSE) - usado para indicar se inclui retweets ou não na pesquisa
# retryonratelimit (TRUE ou FALSE) - usado para indicar se continua ou não depois do limite de 18000 tweets por 15 minutos
tweets <- search_tweets(search.string, n=no.of.tweets, lang="pt", type=type, include_rts=FALSE, retryonratelimit=TRUE)
# Salvando o vetor de tweets como CSV e apenas o texto em TXT na codificação do português
write_as_csv(tweets, "dados/TweetsRawData.csv", fileEncoding="latin1//TRANSLIT")
write.table(tweets$text, "dados/TweetsRawData.txt", fileEncoding="latin1//TRANSLIT")
# Criando as latitudes e longitudes para cada tweet
tweets <- lat_lng(tweets) #cria lat/lng variáveis usando todos os tweets disponíveis
# Plotando o mapa do Brasil
par(mar=c(0, 0, 0, 0)) #função par define ou ajusta os parâmetros de plotagem e o parâmetro mar ajusta as margens
map("world", "brazil", lwd=0.3, fill=T, col="grey95")
map(,, add=T)
map.axes()
map.scale(ratio=T, cex=0.3)
abline(h=0, lty=2)
map.cities(country="Brazil", minpop=2000000, pch=15, cex=0.9) #pacote maps
# Adicionando os tweets ao mapa
with(tweets, points(lng, lat, pch=20, cex=.75, col=rgb(0, .3, .7, .75)))
